###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jan/2020  11:19:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\application\user_app1.c
#    Command line =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\application\user_app1.c -D
#        EIE_ASCII --preprocess=cl
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -lC
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -o
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Software\Develop\IAR for
#        ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\drivers\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\application\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\bsp\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Software\Develop\IAR
#        for ARM\arm\CMSIS\Include\"
#    List file    =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

F:\EIE_TEXT\二进制计数器\firmware_common\application\user_app1.c
      1          /*!*********************************************************************************************************************
      2          @file user_app1.c                                                                
      3          @brief User's tasks / applications are written here.  This description
      4          should be replaced by something specific to the task.
      5          
      6          ----------------------------------------------------------------------------------------------------------------------
      7          To start a new task using this user_app1 as a template:
      8           1. Copy both user_app1.c and user_app1.h to the Application directory
      9           2. Rename the files yournewtaskname.c and yournewtaskname.h
     10           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
     11           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     12           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     13           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     14           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     15           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     16           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     17          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     18          ----------------------------------------------------------------------------------------------------------------------
     19          
     20          ------------------------------------------------------------------------------------------------------------------------
     21          GLOBALS
     22          - NONE
     23          
     24          CONSTANTS
     25          - NONE
     26          
     27          TYPES
     28          - NONE
     29          
     30          PUBLIC FUNCTIONS
     31          - NONE
     32          
     33          PROTECTED FUNCTIONS
     34          - void UserApp1Initialize(void)
     35          - void UserApp1RunActiveState(void)
     36          
     37          
     38          **********************************************************************************************************************/
     39          
     40          #include "configuration.h"
     41          
     42          /***********************************************************************************************************************
     43          Global variable definitions with scope across entire project.
     44          All Global variable names shall start with "G_<type>UserApp1"
     45          ***********************************************************************************************************************/
     46          /* New variables */

   \                                 In section .bss, align 4
     47          volatile u32 G_u32UserApp1Flags;                          /*!< @brief Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     48          
     49          
     50          /*--------------------------------------------------------------------------------------------------------------------*/
     51          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     52          extern volatile u32 G_u32SystemTime1ms;                   /*!< @brief From main.c */
     53          extern volatile u32 G_u32SystemTime1s;                    /*!< @brief From main.c */
     54          extern volatile u32 G_u32SystemFlags;                     /*!< @brief From main.c */
     55          extern volatile u32 G_u32ApplicationFlags;                /*!< @brief From main.c */
     56          
     57          
     58          /***********************************************************************************************************************
     59          Global variable definitions with scope limited to this local application.
     60          Variable names shall start with "UserApp1_<type>" and be declared as static.
     61          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     62          static fnCode_type UserApp1_pfStateMachine;               /*!< @brief The state machine function pointer */
   \                     UserApp1_pfStateMachine:
   \   00000000                      DS8 4
     63          //static u32 UserApp1_u32Timeout;                           /*!< @brief Timeout counter used across states */
     64          
     65          
     66          /**********************************************************************************************************************
     67          Function Definitions
     68          **********************************************************************************************************************/
     69          
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          /*! @publicsection */                                                                                            
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          /*! @protectedsection */                                                                                            
     76          /*--------------------------------------------------------------------------------------------------------------------*/
     77          
     78          /*!--------------------------------------------------------------------------------------------------------------------
     79          @fn void UserApp1Initialize(void)
     80          
     81          @brief
     82          Initializes the State Machine and its variables.
     83          
     84          Should only be called once in main init section.
     85          
     86          Requires:
     87          - NONE
     88          
     89          Promises:
     90          - NONE
     91          
     92          */

   \                                 In section .text, align 2, keep-with-next
     93          void UserApp1Initialize(void)
     94          {
     95            /* If good initialization, set state to Idle */
     96            if( 1 )
     97            {
     98              UserApp1_pfStateMachine = UserApp1SM_Idle;
   \                     UserApp1Initialize: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000004   0x....             LDR.N    R1,??DataTable2
   \   00000006   0x6008             STR      R0,[R1, #+0]
     99            }
    100            else
    101            {
    102              /* The task isn't properly initialized, so shut it down and don't run */
    103              UserApp1_pfStateMachine = UserApp1SM_Error;
    104            }
    105          
    106          } /* end UserApp1Initialize() */
   \   00000008   0x4770             BX       LR               ;; return
    107          
    108            
    109          /*!----------------------------------------------------------------------------------------------------------------------
    110          @fn void UserApp1RunActiveState(void)
    111          
    112          @brief Selects and runs one iteration of the current state in the state machine.
    113          
    114          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    115          may take 1ms / n to execute.
    116          
    117          Requires:
    118          - State machine function pointer points at current state
    119          
    120          Promises:
    121          - Calls the function to pointed by the state machine function pointer
    122          
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          void UserApp1RunActiveState(void)
    125          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    126            UserApp1_pfStateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    127          
    128          } /* end UserApp1RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    129          
    130          
    131          /*------------------------------------------------------------------------------------------------------------------*/
    132          /*! @privatesection */                                                                                            
    133          /*--------------------------------------------------------------------------------------------------------------------*/
    134          
    135          
    136          /**********************************************************************************************************************
    137          State Machine Function Definitions
    138          **********************************************************************************************************************/
    139          /*-------------------------------------------------------------------------------------------------------------------*/
    140          /* What does this state do? */

   \                                 In section .text, align 4, keep-with-next
    141          static void UserApp1SM_Idle(void)
    142          {
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    143            static u8 ledsState=254;
    144            static u16 time=100;
    145            time--;
   \   00000002   0x....             LDR.N    R0,??DataTable2_1
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x1E40             SUBS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable2_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    146            if(time==0)
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD11C             BNE.N    ??UserApp1SM_Idle_0
    147            {
    148              for(int i=0;i<8;i++)//灯开关设置
   \   00000014   0x2400             MOVS     R4,#+0
   \                     ??UserApp1SM_Idle_1: (+1)
   \   00000016   0x2C08             CMP      R4,#+8
   \   00000018   0xDA11             BGE.N    ??UserApp1SM_Idle_2
    149                if( (ledsState>>i)&0x01 )
   \   0000001A   0x....             LDR.N    R0,??DataTable2_2
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x4120             ASRS     R0,R0,R4
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD505             BPL.N    ??UserApp1SM_Idle_3
    150                  LedOn(7-i);
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000024   0xF1D4 0x0007      RSBS     R0,R4,#+7
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LedOn
   \   0000002E   0xE004             B.N      ??UserApp1SM_Idle_4
    151                else
    152                  LedOff(7-i);
                                ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserApp1SM_Idle_3: (+1)
   \   00000030   0xF1D4 0x0007      RSBS     R0,R4,#+7
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       LedOff
   \                     ??UserApp1SM_Idle_4: (+1)
   \   0000003A   0x1C64             ADDS     R4,R4,#+1
   \   0000003C   0xE7EB             B.N      ??UserApp1SM_Idle_1
    153              time=100;
   \                     ??UserApp1SM_Idle_2: (+1)
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0x....             LDR.N    R1,??DataTable2_1
   \   00000042   0x8008             STRH     R0,[R1, #+0]
    154              ledsState++;
   \   00000044   0x....             LDR.N    R0,??DataTable2_2
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable2_2
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    155            }
    156          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_0: (+1)
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .data, align 1
   \                     ??ledsState:
   \   00000000   0xFE               DC8 254

   \                                 In section .data, align 2
   \                     ??time:
   \   00000000   0x0064             DC16 100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     UserApp1_pfStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??ledsState
    157               
    158          
    159          /*-------------------------------------------------------------------------------------------------------------------*/
    160          /* Handle an error */
    161          static void UserApp1SM_Error(void)          
    162          {
    163          
    164          } /* end UserApp1SM_Error() */
    165          
    166          
    167          
    168          
    169          /*--------------------------------------------------------------------------------------------------------------------*/
    170          /* End of File                                                                                                        */
    171          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UserApp1Initialize
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   UserApp1SM_Idle
         8   -> LedOff
         8   -> LedOn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  G_u32UserApp1Flags
      10  UserApp1Initialize
      10  UserApp1RunActiveState
      80  UserApp1SM_Idle
       4  UserApp1_pfStateMachine
       1  ledsState
       2  time

 
   8 bytes in section .bss
   3 bytes in section .data
 112 bytes in section .text
 
 112 bytes of CODE memory
  11 bytes of DATA memory

Errors: none
Warnings: 2

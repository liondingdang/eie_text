###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jan/2020  11:19:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\drivers\interrupts.c
#    Command line =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\drivers\interrupts.c -D
#        EIE_ASCII --preprocess=cl
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -lC
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -o
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Software\Develop\IAR for
#        ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\drivers\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\application\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\bsp\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Software\Develop\IAR
#        for ARM\arm\CMSIS\Include\"
#    List file    =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\interrupts.lst
#    Object file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\interrupts.o
#
###############################################################################

F:\EIE_TEXT\二进制计数器\firmware_common\drivers\interrupts.c
      1          /*!*********************************************************************************************************************
      2          @file interrupts.c                                                               
      3          @brief Definitions for main system interrupts.
      4          
      5          ------------------------------------------------------------------------------------------------------------------------
      6          GLOBALS
      7          - NONE
      8          
      9          CONSTANTS
     10          - NONE
     11          
     12          TYPES
     13          - 
     14          PUBLIC FUNCTIONS
     15          - NONE
     16          
     17          PROTECTED FUNCTIONS
     18          - 
     19          
     20          
     21          ***********************************************************************************************************************/
     22          
     23          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable5  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     NVIC_ClearPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable5_1  ;; 0xe000e280
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope across entire project.
     27          All Global variable names shall start with "G_<type>ISR"
     28          ***********************************************************************************************************************/
     29          /* New variables */
     30          
     31          
     32          /*--------------------------------------------------------------------------------------------------------------------*/
     33          /* Existing variables (defined in other files -- should all contain the "extern" keyword)  */
     34          extern volatile u32 G_u32SystemTime1ms;                /*!< @brief From main.c */
     35          extern volatile u32 G_u32SystemTime1s;                 /*!< @brief From main.c */
     36          extern volatile u32 G_u32SystemFlags;                  /*!< @brief From main.c */
     37          extern volatile u32 G_u32ApplicationFlags;             /*!< @brief From main.c */
     38          
     39          
     40          /***********************************************************************************************************************
     41          Global variable definitions with scope limited to this local application.
     42          Variables names shall start with "ISR_<type>" and be declared as static.
     43          ***********************************************************************************************************************/
     44          
     45          
     46          /**********************************************************************************************************************
     47          Interrupt Service Routine Definitions
     48          ***********************************************************************************************************************/
     49          
     50          /*--------------------------------------------------------------------------------------------------------------------*/
     51          /*! @protectedsection */                                                                                            
     52          /*--------------------------------------------------------------------------------------------------------------------*/
     53          
     54          /*!----------------------------------------------------------------------------------------------------------------------
     55          @fn void InterruptSetup(void)
     56          
     57          @brief Disables and clears all NVIC interrupts and sets up interrupt priorities.
     58          
     59          Peripheral interrupt sources should be enabled outside of this function.
     60          As this should be the first interrupt-related function that is called in
     61          the system, we can conclude that clearing all the pending flags should
     62          work since no peripheral interrupt sources should be connected yet. 
     63          
     64          Requires:
     65          - IRQn_Type enum is the sequentially ordered interrupt values starting at 0
     66          
     67          Promises:
     68          - Interrupt priorities are set 
     69          - All NVIC interrupts are disabled and all pending flags are cleared
     70          
     71          */

   \                                 In section .text, align 2, keep-with-next
     72          void InterruptSetup(void)
     73          {
   \                     InterruptSetup: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     74            static const u32 au32PriorityConfig[PRIORITY_REGISTERS] = {IPR0_INIT, IPR1_INIT, IPR2_INIT, 
     75                                                                       IPR3_INIT, IPR4_INIT, IPR5_INIT,
     76                                                                       IPR6_INIT, IPR7_INIT};
     77            
     78            /* Disable all interrupts and ensure pending bits are clear */
     79            for(u8 i = 0; i < U8_SAM3U2_INTERRUPT_SOURCES; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??InterruptSetup_0: (+1)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C1E             CMP      R4,#+30
   \   00000008   0xDA09             BGE.N    ??InterruptSetup_1
     80            {
     81              NVIC_DisableIRQ( (IRQn_Type)i );
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
     82              NVIC_ClearPendingIRQ( (IRQn_Type)i);
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       NVIC_ClearPendingIRQ
     83            } 
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \   0000001C   0xE7F2             B.N      ??InterruptSetup_0
     84          
     85            /* Set interrupt priorities */
     86            for(u8 i = 0; i < PRIORITY_REGISTERS; i++)
   \                     ??InterruptSetup_1: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??InterruptSetup_2: (+1)
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2808             CMP      R0,#+8
   \   00000024   0xDA09             BGE.N    ??InterruptSetup_3
     87            {
     88              ((u32*)(AT91C_BASE_NVIC->NVIC_IPR))[i] = au32PriorityConfig[i];
   \   00000026   0x....             LDR.N    R1,??DataTable5_2
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000002E   0x....             LDR.N    R2,??DataTable5_3  ;; 0xe000e400
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
     89            }
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xE7F2             B.N      ??InterruptSetup_2
     90                
     91          } /* end InterruptSetup(void) */
   \                     ??InterruptSetup_3: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 4
   \                     ??au32PriorityConfig:
   \   00000000   0xF0F000F0         DC32 4042260720, 4042321920, 1347481840, 4029689936, 4028690672
   \              0xF0F0F000   
   \              0x5050F0F0   
   \              0xF0303050   
   \              0xF020F0F0   
   \   00000014   0x4000F020         DC32 1073803296, 4042321984, 4336
   \              0xF0F0F040   
   \              0x000010F0   
     92          
     93            
     94          /*!----------------------------------------------------------------------------------------------------------------------
     95          @fn ISR void SysTick_Handler(void)
     96          
     97          @brief Updates the global ms timer.  
     98          
     99          This interrupt is always enabled and running in 
    100          the system and is essential for system timing and sleep wakeup.
    101          This ISR should be as fast as possible!
    102          
    103          Requires:
    104          - NONE
    105          
    106          Promises:
    107          - System tick interrupt pending flag is cleared
    108          - G_u32SystemFlags _SYSTEM_SLEEPING cleared
    109          - G_u32SystemTime1ms counter is incremented by 1
    110          
    111          */

   \                                 In section .text, align 2, keep-with-next
    112          void SysTick_Handler(void)
    113          {
    114            /* Clear the sleep flag */
    115            G_u32SystemFlags &= ~_SYSTEM_SLEEPING;
   \                     SysTick_Handler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x4080      BICS     R0,R0,#0x40000000
   \   00000008   0x....             LDR.N    R1,??DataTable5_4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    116            
    117            /* Update Timers */
    118            G_u32SystemTime1ms++;
   \   0000000C   0x....             LDR.N    R0,??DataTable5_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable5_5
   \   00000014   0x6008             STR      R0,[R1, #+0]
    119            if( (G_u32SystemTime1ms % 1000) == 0)
   \   00000016   0x....             LDR.N    R0,??DataTable5_5
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000001E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000022   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD104             BNE.N    ??SysTick_Handler_0
    120            {
    121              G_u32SystemTime1s++;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_6
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable5_6
   \   00000032   0x6008             STR      R0,[R1, #+0]
    122            }
    123              
    124          } /* end SysTickHandler(void) */
   \                     ??SysTick_Handler_0: (+1)
   \   00000034   0x4770             BX       LR               ;; return
    125          
    126          
    127          /*!----------------------------------------------------------------------------------------------------------------------
    128          @fn ISR void PIOA_IrqHandler(void)
    129          
    130          @brief Parses the PORTA GPIO interrupts and handles them appropriately.  
    131          
    132          Note that all PORTA GPIO interrupts are ORed and will trigger this handler, 
    133          therefore any expected interrupt that is enabled must be parsed out and handled.
    134          
    135          Requires:
    136          - The button IO bits match the interrupt flag locations
    137          
    138          Promises:
    139          - Buttons: sets the active button's debouncing flag, clears the interrupt
    140            and initializes the button's debounce timer.
    141          
    142          */

   \                                 In section .text, align 2, keep-with-next
    143          void PIOA_IrqHandler(void)
    144          {
   \                     PIOA_IrqHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    145            u32 u32GPIOInterruptSources;
    146            u32 u32ButtonInterrupts;
    147            u32 u32CurrentButtonLocation;
    148          
    149            /* Grab a snapshot of the current PORTA status flags (clears all flags) */
    150            u32GPIOInterruptSources = AT91C_BASE_PIOA->PIO_ISR;
   \   00000002   0x....             LDR.N    R0,??DataTable5_7  ;; 0x400e0c4c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    151          
    152            /******** DO NOT set a breakpoint before this line of the ISR because the debugger
    153            will "read" PIO_ISR and clear the flags. ********/
    154            
    155            /* Examine button interrupts */
    156            u32ButtonInterrupts = u32GPIOInterruptSources & GPIOA_BUTTONS;
   \   00000008   0xF414 0x3000      ANDS     R0,R4,#0x20000
   \   0000000C   0x0005             MOVS     R5,R0
    157            
    158            /* Check if any port A buttons interrupted */
    159            if(u32ButtonInterrupts)
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD00E             BEQ.N    ??PIOA_IrqHandler_0
    160            {
    161              /* Scan through the flags looking for ones that are set */
    162              u32CurrentButtonLocation = 0x00000001;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0006             MOVS     R6,R0
    163              for(u8 i = 0; i < 32; i++)
   \   00000016   0x2700             MOVS     R7,#+0
   \                     ??PIOA_IrqHandler_1: (+1)
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x2F20             CMP      R7,#+32
   \   0000001C   0xDA08             BGE.N    ??PIOA_IrqHandler_0
    164              {
    165                /* If the bit is set, then start debouncing (also disables interrupt) */
    166                if(u32ButtonInterrupts & u32CurrentButtonLocation)
   \   0000001E   0x4235             TST      R5,R6
   \   00000020   0xD003             BEQ.N    ??PIOA_IrqHandler_2
    167                {
    168                  ButtonStartDebounce(u32CurrentButtonLocation, PORTA);
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       ButtonStartDebounce
    169                }
    170                
    171                /* Shift the mask to look at the next bit */
    172                u32CurrentButtonLocation <<= 1;
   \                     ??PIOA_IrqHandler_2: (+1)
   \   0000002A   0x0076             LSLS     R6,R6,#+1
    173              }
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \   0000002E   0xE7F3             B.N      ??PIOA_IrqHandler_1
    174                  
    175            } /* end port A button interrupt checking */
    176            
    177            /* Clear the PIOA pending flag and exit */
    178            NVIC_ClearPendingIRQ(IRQn_PIOA);
   \                     ??PIOA_IrqHandler_0: (+1)
   \   00000030   0x200A             MOVS     R0,#+10
   \   00000032   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    179            
    180          } /* end PIOA_IrqHandler() */
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    181          
    182          
    183          /*!----------------------------------------------------------------------------------------------------------------------
    184          @fn ISR void PIOB_IrqHandler(void)
    185          
    186          @brief Parses the PORTB GPIO interrupts and handles them appropriately.  
    187          
    188          Note that all PORTB GPIO interrupts are ORed and will trigger this handler, 
    189          so any expected interrupt that is enabled must be parsed out and handled.
    190          
    191          Requires:
    192          - The button IO bits match the interrupt flag locations
    193          
    194          Promises:
    195          - Buttons: sets the active button's debouncing flag, clears the interrupt
    196            and initializes the button's debounce timer.
    197          
    198          */

   \                                 In section .text, align 2, keep-with-next
    199          void PIOB_IrqHandler(void)
    200          {
   \                     PIOB_IrqHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    201            u32 u32GPIOInterruptSources;
    202            u32 u32ButtonInterrupts;
    203            u32 u32CurrentButtonLocation;
    204          
    205            /* Grab a snapshot of the current PORTB status flags (clears all flags) */
    206            u32GPIOInterruptSources = AT91C_BASE_PIOB->PIO_ISR;
   \   00000002   0x....             LDR.N    R0,??DataTable5_8  ;; 0x400e0e4c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    207          
    208            /******** DO NOT set a breakpoint before this line of the ISR because the debugger
    209            will "read" PIO_ISR and clear the flags. ********/
    210            
    211            /* Examine button interrupts */
    212            u32ButtonInterrupts = u32GPIOInterruptSources & GPIOB_BUTTONS;
   \   00000008   0xF014 0x0007      ANDS     R0,R4,#0x7
   \   0000000C   0x0005             MOVS     R5,R0
    213            
    214            /* Check if any port B buttons interrupted */
    215            if(u32ButtonInterrupts)
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD00E             BEQ.N    ??PIOB_IrqHandler_0
    216            {
    217              /* Scan through the flags looking for ones that are set */
    218              u32CurrentButtonLocation = 0x00000001;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0006             MOVS     R6,R0
    219              for(u8 i = 0; i < 32; i++)
   \   00000016   0x2700             MOVS     R7,#+0
   \                     ??PIOB_IrqHandler_1: (+1)
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x2F20             CMP      R7,#+32
   \   0000001C   0xDA08             BGE.N    ??PIOB_IrqHandler_0
    220              {
    221                /* If the bit is set, then start debouncing (also disables interrupt) */
    222                if(u32ButtonInterrupts & u32CurrentButtonLocation)
   \   0000001E   0x4235             TST      R5,R6
   \   00000020   0xD003             BEQ.N    ??PIOB_IrqHandler_2
    223                {
    224                  ButtonStartDebounce(u32CurrentButtonLocation, PORTB);
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       ButtonStartDebounce
    225                }
    226                
    227                /* Shift the mask to look at the next bit */
    228                u32CurrentButtonLocation <<= 1;
   \                     ??PIOB_IrqHandler_2: (+1)
   \   0000002A   0x0076             LSLS     R6,R6,#+1
    229              }
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \   0000002E   0xE7F3             B.N      ??PIOB_IrqHandler_1
    230                  
    231            } /* end port B button interrupt checking */
    232            
    233            /* Clear the PIOB pending flag and exit */
    234            NVIC_ClearPendingIRQ(IRQn_PIOB);
   \                     ??PIOB_IrqHandler_0: (+1)
   \   00000030   0x200B             MOVS     R0,#+11
   \   00000032   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    235            
    236          } /* end PIOB_IrqHandler() */
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    237          
    238          
    239          /*!----------------------------------------------------------------------------------------------------------------------
    240          @fn ISR void HardFault_Handler(void)
    241           
    242          @brief A non-maskable (always available) core interrupt that occurs when 
    243          something extraordinary occurs.  
    244          
    245          In many cases, this is referencing an invalid address, but can be other 
    246          events of various levels of mystery.  
    247          
    248          Requires:
    249          - NONE
    250          
    251          Promises:
    252          - Red LED is on, all others off
    253          - Code is held here for debug purposes
    254          
    255          */

   \                                 In section .text, align 2, keep-with-next
    256          void HardFault_Handler(void)
    257          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    258          #ifdef EIE_ASCII
    259            LedOff(WHITE);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LedOff
    260            LedOff(CYAN);
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x.... 0x....      BL       LedOff
    261            LedOff(PURPLE);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       LedOff
    262            LedOff(ORANGE);
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016   0x.... 0x....      BL       LedOff
    263            LedOff(BLUE);
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       LedOff
    264            LedOff(GREEN);
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       LedOff
    265            LedOff(YELLOW);
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0x.... 0x....      BL       LedOff
    266            LedOn(RED);
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x.... 0x....      BL       LedOn
    267          #endif
    268          
    269          #ifdef EIE_DOTMATRIX
    270          #ifdef EIE_DOTMATRIX_R01  
    271            LedOff(BLUE);
    272            LedOff(GREEN);
    273            LedOff(YELLOW);
    274            LedOn(RED);
    275          #else
    276            LedOff(BLUE0);
    277            LedOff(BLUE1);
    278            LedOff(BLUE2);
    279            LedOff(BLUE3);
    280            LedOff(GREEN0);
    281            LedOff(GREEN1);
    282            LedOff(GREEN2);
    283            LedOff(GREEN3);
    284            LedOff(RED1);
    285            LedOff(RED2);
    286            LedOff(RED3);
    287            
    288            LedOn(RED0);
    289          #endif /* EIE_DOTMATRIX_R01 */
    290          #endif /* EIE_DOTMATRIX */
    291            
    292            while(1);  /* !!!!! update to log and/or report error and/or restart */
   \                     ??HardFault_Handler_0: (+1)
   \   00000032   0xE7FE             B.N      ??HardFault_Handler_0
    293            
    294          } /* end HardFault_Handler() */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ??au32PriorityConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x400E0C4C         DC32     0x400e0c4c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x400E0E4C         DC32     0x400e0e4c
    295          
    296          
    297          
    298          
    299          /*--------------------------------------------------------------------------------------------------------------------*/
    300          /* End of File */
    301          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HardFault_Handler
         8   -> LedOff
         8   -> LedOn
       8   InterruptSetup
         8   -> NVIC_ClearPendingIRQ
         8   -> NVIC_DisableIRQ
       0   NVIC_ClearPendingIRQ
       0   NVIC_DisableIRQ
      24   PIOA_IrqHandler
        24   -> ButtonStartDebounce
        24   -> NVIC_ClearPendingIRQ
      24   PIOB_IrqHandler
        24   -> ButtonStartDebounce
        24   -> NVIC_ClearPendingIRQ
       0   SysTick_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
      52  HardFault_Handler
      60  InterruptSetup
      20  NVIC_ClearPendingIRQ
      20  NVIC_DisableIRQ
      56  PIOA_IrqHandler
      56  PIOB_IrqHandler
      54  SysTick_Handler
      32  au32PriorityConfig

 
  32 bytes in section .rodata
 354 bytes in section .text
 
 354 bytes of CODE  memory
  32 bytes of CONST memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jan/2020  11:19:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\application\main.c
#    Command line =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\application\main.c -D
#        EIE_ASCII --preprocess=cl
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -lC
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -o
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Software\Develop\IAR for
#        ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\drivers\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\application\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\bsp\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Software\Develop\IAR
#        for ARM\arm\CMSIS\Include\"
#    List file    =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\main.lst
#    Object file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\main.o
#
###############################################################################

F:\EIE_TEXT\二进制计数器\firmware_common\application\main.c
      1          /*!**********************************************************************************************************************
      2          @file main.c                                                                
      3          @brief Main system file for the EiE firmware.  
      4          ***********************************************************************************************************************/
      5          
      6          #include "configuration.h"
      7          
      8          extern	void kill_x_cycles(u32);
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemTime1ms = 0;     /*!< @brief Global system time incremented every ms, max 2^32 (~49 days) */
   \                     G_u32SystemTime1ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32SystemTime1s  = 0;     /*!< @brief Global system time incremented every second, max 2^32 (~136 years) */
   \                     G_u32SystemTime1s:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          volatile u32 G_u32SystemFlags   = 0;     /*!< @brief Global system flags */
   \                     G_u32SystemFlags:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          volatile u32 G_u32ApplicationFlags = 0;  /*!< @brief Global system application flags: set when application is successfully initialized */
   \                     G_u32ApplicationFlags:
   \   00000000                      DS8 4
     19          
     20          /* Task short names corresponding to G_u32ApplicationFlags in main.h */
     21          #ifdef EIE_ASCII

   \                                 In section .rodata, align 4
     22          const u8 G_aau8AppShortNames[NUMBER_APPLICATIONS][MAX_TASK_NAME_SIZE] = 
   \                     G_aau8AppShortNames:
   \   00000000   0x4C 0x45          DC8 "LED"
   \              0x44 0x00    
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000000A   0x42 0x55          DC8 "BUTTON"
   \              0x54 0x54    
   \              0x4F 0x4E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000014   0x44 0x45          DC8 "DEBUG"
   \              0x42 0x55    
   \              0x47 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000001E   0x54 0x49          DC8 "TIMER"
   \              0x4D 0x45    
   \              0x52 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000028   0x4C 0x43          DC8 "LCD"
   \              0x44 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000032   0x41 0x44          DC8 "ADC"
   \              0x43 0x00    
   \   00000036   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x41 0x4E          DC8 "ANT"
   \              0x54 0x00    
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     23          {"LED", "BUTTON", "DEBUG", "TIMER", "LCD", "ADC", "ANT"};
     24          #endif /* EIE_ASCII */
     25          
     26          #ifdef EIE_DOTMATRIX
     27          const u8 G_aau8AppShortNames[NUMBER_APPLICATIONS][MAX_TASK_NAME_SIZE] = 
     28          {"LED", "BUTTON", "DEBUG", "TIMER", "LCD", "ADC", "ANT", "CAPTOUCH"};
     29          #endif /* EIE_DOTMATRIX */
     30          
     31          
     32          /*--------------------------------------------------------------------------------------------------------------------*/
     33          /* External global variables defined in other files (must indicate which file they are defined in) */
     34          
     35          
     36          /***********************************************************************************************************************
     37          Global variable definitions with scope limited to this local application.
     38          Variable names shall start with "Main_" and be declared as static.
     39          ***********************************************************************************************************************/
     40          
     41          
     42          /*!---------------------------------------------------------------------------------------------------------------------
     43          @fn void main(void)
     44          @brief Main program where all tasks are initialized and executed.
     45          
     46          Requires:
     47          - NONE
     48          
     49          Promises:
     50          - NONE
     51          
     52          */

   \                                 In section .text, align 4, keep-with-next
     53          void main(void)
     54          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     55            G_u32SystemFlags |= _SYSTEM_INITIALIZING;
   \   00000002   0x4835             LDR.N    R0,??main_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000000A   0x4933             LDR.N    R1,??main_0
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     56          
     57            /* Low level initialization */
     58            WatchDogSetup(); 
   \   0000000E   0x.... 0x....      BL       WatchDogSetup
     59            ClockSetup();
   \   00000012   0x.... 0x....      BL       ClockSetup
     60            GpioSetup();
   \   00000016   0x.... 0x....      BL       GpioSetup
     61            PWMSetupAudio();
   \   0000001A   0x.... 0x....      BL       PWMSetupAudio
     62            InterruptSetup();
   \   0000001E   0x.... 0x....      BL       InterruptSetup
     63            SysTickSetup();
   \   00000022   0x.... 0x....      BL       SysTickSetup
     64            
     65            /* Driver initialization */
     66            MessagingInitialize();
   \   00000026   0x.... 0x....      BL       MessagingInitialize
     67            UartInitialize();
   \   0000002A   0x.... 0x....      BL       UartInitialize
     68            DebugInitialize();
   \   0000002E   0x.... 0x....      BL       DebugInitialize
     69          
     70            /* Debug messages through DebugPrintf() are available from here */
     71            ButtonInitialize();
   \   00000032   0x.... 0x....      BL       ButtonInitialize
     72            TimerInitialize();  
   \   00000036   0x.... 0x....      BL       TimerInitialize
     73            SpiInitialize();
   \   0000003A   0x.... 0x....      BL       SpiInitialize
     74            SspInitialize();
   \   0000003E   0x.... 0x....      BL       SspInitialize
     75            TwiInitialize();
   \   00000042   0x.... 0x....      BL       TwiInitialize
     76          
     77            Adc12Initialize();
   \   00000046   0x.... 0x....      BL       Adc12Initialize
     78            LcdInitialize();
   \   0000004A   0x.... 0x....      BL       LcdInitialize
     79            LedInitialize();
   \   0000004E   0x.... 0x....      BL       LedInitialize
     80            AntInitialize();
   \   00000052   0x.... 0x....      BL       AntInitialize
     81            AntApiInitialize();
   \   00000056   0x.... 0x....      BL       AntApiInitialize
     82            
     83          #ifdef EIE_ASCII
     84          #endif /* EIE_ASCII */
     85          
     86          #ifdef EIE_DOTMATRIX
     87            CapTouchInitialize();
     88          #endif /* EIE_DOTMATRIX */
     89           
     90            /* Application initialization */
     91            UserApp1Initialize();
   \   0000005A   0x.... 0x....      BL       UserApp1Initialize
     92            UserApp2Initialize();
   \   0000005E   0x.... 0x....      BL       UserApp2Initialize
     93            UserApp3Initialize();
   \   00000062   0x.... 0x....      BL       UserApp3Initialize
     94          
     95            /* Exit initialization */
     96            SystemStatusReport();
   \   00000066   0x.... 0x....      BL       SystemStatusReport
     97            G_u32SystemFlags &= ~_SYSTEM_INITIALIZING;
   \   0000006A   0x481B             LDR.N    R0,??main_0
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   00000070   0x0840             LSRS     R0,R0,#+1
   \   00000072   0x4919             LDR.N    R1,??main_0
   \   00000074   0x6008             STR      R0,[R1, #+0]
     98            
     99            /* Super loop */  
    100            while(1)
    101            {
    102              WATCHDOG_BONE();
   \                     ??main_1: (+1)
   \   00000076   0x4819             LDR.N    R0,??main_0+0x4  ;; 0xa5000001
   \   00000078   0x4919             LDR.N    R1,??main_0+0x8  ;; 0x400e1250
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    103              SystemTimeCheck();
   \   0000007C   0x.... 0x....      BL       SystemTimeCheck
    104          
    105              /* Drivers */
    106              MessagingRunActiveState();
   \   00000080   0x.... 0x....      BL       MessagingRunActiveState
    107              UartRunActiveState();
   \   00000084   0x.... 0x....      BL       UartRunActiveState
    108              DebugRunActiveState();
   \   00000088   0x.... 0x....      BL       DebugRunActiveState
    109          
    110              ButtonRunActiveState();
   \   0000008C   0x.... 0x....      BL       ButtonRunActiveState
    111              TimerRunActiveState(); 
   \   00000090   0x.... 0x....      BL       TimerRunActiveState
    112              SpiRunActiveState();
   \   00000094   0x.... 0x....      BL       SpiRunActiveState
    113              SspRunActiveState();
   \   00000098   0x.... 0x....      BL       SspRunActiveState
    114              TwiRunActiveState();
   \   0000009C   0x.... 0x....      BL       TwiRunActiveState
    115          
    116              Adc12RunActiveState();
   \   000000A0   0x.... 0x....      BL       Adc12RunActiveState
    117              LcdRunActiveState();
   \   000000A4   0x.... 0x....      BL       LcdRunActiveState
    118              LedRunActiveState();
   \   000000A8   0x.... 0x....      BL       LedRunActiveState
    119              AntRunActiveState();
   \   000000AC   0x.... 0x....      BL       AntRunActiveState
    120              AntApiRunActiveState();
   \   000000B0   0x.... 0x....      BL       AntApiRunActiveState
    121          
    122          #ifdef EIE_ASCII
    123          #endif /* EIE_ASCII */
    124          
    125          #ifdef EIE_DOTMATRIX
    126              CapTouchRunActiveState();
    127          #endif /* EIE_DOTMATRIX */
    128          
    129              /* Applications */
    130              UserApp1RunActiveState();
   \   000000B4   0x.... 0x....      BL       UserApp1RunActiveState
    131              UserApp2RunActiveState();
   \   000000B8   0x.... 0x....      BL       UserApp2RunActiveState
    132              UserApp3RunActiveState();
   \   000000BC   0x.... 0x....      BL       UserApp3RunActiveState
    133                  
    134              /* System sleep */
    135              HEARTBEAT_OFF();
   \   000000C0   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   000000C4   0x4907             LDR.N    R1,??main_0+0xC  ;; 0x400e0c30
   \   000000C6   0x6008             STR      R0,[R1, #+0]
    136              SystemSleep();
   \   000000C8   0x.... 0x....      BL       SystemSleep
    137              HEARTBEAT_ON();
   \   000000CC   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   000000D0   0x4905             LDR.N    R1,??main_0+0x10  ;; 0x400e0c34
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0xE7CF             B.N      ??main_1
   \   000000D6   0xBF00             Nop      
   \                     ??main_0:
   \   000000D8   0x........         DC32     G_u32SystemFlags
   \   000000DC   0xA5000001         DC32     0xa5000001
   \   000000E0   0x400E1250         DC32     0x400e1250
   \   000000E4   0x400E0C30         DC32     0x400e0c30
   \   000000E8   0x400E0C34         DC32     0x400e0c34
    138              
    139            } /* end while(1) main super loop */
    140            
    141          } /* end main() */
    142          
    143          
    144          
    145          
    146          /*--------------------------------------------------------------------------------------------------------------------*/
    147          /* End of File */
    148          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> Adc12Initialize
         8   -> Adc12RunActiveState
         8   -> AntApiInitialize
         8   -> AntApiRunActiveState
         8   -> AntInitialize
         8   -> AntRunActiveState
         8   -> ButtonInitialize
         8   -> ButtonRunActiveState
         8   -> ClockSetup
         8   -> DebugInitialize
         8   -> DebugRunActiveState
         8   -> GpioSetup
         8   -> InterruptSetup
         8   -> LcdInitialize
         8   -> LcdRunActiveState
         8   -> LedInitialize
         8   -> LedRunActiveState
         8   -> MessagingInitialize
         8   -> MessagingRunActiveState
         8   -> PWMSetupAudio
         8   -> SpiInitialize
         8   -> SpiRunActiveState
         8   -> SspInitialize
         8   -> SspRunActiveState
         8   -> SysTickSetup
         8   -> SystemSleep
         8   -> SystemStatusReport
         8   -> SystemTimeCheck
         8   -> TimerInitialize
         8   -> TimerRunActiveState
         8   -> TwiInitialize
         8   -> TwiRunActiveState
         8   -> UartInitialize
         8   -> UartRunActiveState
         8   -> UserApp1Initialize
         8   -> UserApp1RunActiveState
         8   -> UserApp2Initialize
         8   -> UserApp2RunActiveState
         8   -> UserApp3Initialize
         8   -> UserApp3RunActiveState
         8   -> WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  G_aau8AppShortNames
       4  G_u32ApplicationFlags
       4  G_u32SystemFlags
       4  G_u32SystemTime1ms
       4  G_u32SystemTime1s
     236  main

 
  16 bytes in section .bss
  72 bytes in section .rodata
 236 bytes in section .text
 
 236 bytes of CODE  memory
  72 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none

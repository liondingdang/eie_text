###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jan/2020  11:19:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\EIE_TEXT\二进制计数器\firmware_common\drivers\timer.c
#    Command line =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\drivers\timer.c -D EIE_ASCII
#        --preprocess=cl
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -lC
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -o
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Software\Develop\IAR for
#        ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\drivers\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\application\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\bsp\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Software\Develop\IAR
#        for ARM\arm\CMSIS\Include\"
#    List file    =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\timer.lst
#    Object file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\timer.o
#
###############################################################################

F:\EIE_TEXT\二进制计数器\firmware_common\drivers\timer.c
      1          /*!**********************************************************************************************************************
      2          @file timer.c                                                                
      3          @brief Provide easy access to set up and run a Timer Counter (TC) Peripheral.
      4          
      5          ------------------------------------------------------------------------------------------------------------------------
      6          GLOBALS
      7          - NONE
      8          
      9          CONSTANTS
     10          - NONE
     11          
     12          TYPES
     13          - TimerChannelType: TIMER0_CHANNEL0, TIMER0_CHANNEL1, TIMER0_CHANNEL2
     14          
     15          PUBLIC FUNCTIONS
     16          - void TimerSet(TimerChannelType eTimerChannel_, u16 u16TimerValue_)
     17          - void TimerStart(TimerChannelType eTimerChannel_)
     18          - void TimerStop(TimerChannelType eTimerChannel_)
     19          - u16 TimerGetTime(TimerChannelType eTimerChannel_)
     20          - void TimerAssignCallback(TimerChannelType eTimerChannel_, fnCode_type fpUserCallback_)
     21           
     22          PROTECTED FUNCTIONS
     23          - void TimerInitialize(void)
     24          - void TimerRunActiveState(void)
     25          
     26          **********************************************************************************************************************/
     27          
     28          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable9  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     NVIC_ClearPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable9_1  ;; 0xe000e280
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     29          
     30          /***********************************************************************************************************************
     31          Global variable definitions with scope across entire project.
     32          All Global variable names shall start with "G_<type>Timer"
     33          ***********************************************************************************************************************/
     34          /* New variables */

   \                                 In section .bss, align 4
     35          volatile u32 G_u32TimerFlags;                      /*!< @brief Global Timer state flags */
   \                     G_u32TimerFlags:
   \   00000000                      DS8 4
     36          
     37          
     38          /*--------------------------------------------------------------------------------------------------------------------*/
     39          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     40          extern volatile u32 G_u32SystemTime1ms;            /*!< @brief From main.c */
     41          extern volatile u32 G_u32SystemTime1s;             /*!< @brief From main.c */
     42          extern volatile u32 G_u32SystemFlags;              /*!< @brief From main.c */
     43          extern volatile u32 G_u32ApplicationFlags;         /*!< @brief From main.c */
     44          
     45          
     46          /***********************************************************************************************************************
     47          Global variable definitions with scope limited to this local application.
     48          Variable names shall start with "Timer_<type>" and be declared as static.
     49          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     50          static fnCode_type Timer_fpStateMachine;          /*!< @brief The state machine function pointer */
   \                     Timer_fpStateMachine:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     51          static fnCode_type Timer_fpTimer1Callback;        /*!< @brief Timer1 ISR callback function pointer */
   \                     Timer_fpTimer1Callback:
   \   00000000                      DS8 4
     52          

   \                                 In section .bss, align 4
     53          static u32 Timer_u32Timer1IntCounter = 0;         /*!< @brief Track instances of The TC1 interrupt handler */
   \                     Timer_u32Timer1IntCounter:
   \   00000000                      DS8 4
     54          
     55          
     56          /**********************************************************************************************************************
     57          Function Definitions
     58          **********************************************************************************************************************/
     59          
     60          /*--------------------------------------------------------------------------------------------------------------------*/
     61          /*! @publicsection */                                                                                            
     62          /*--------------------------------------------------------------------------------------------------------------------*/
     63          
     64          /*!---------------------------------------------------------------------------------------------------------------------
     65          @fn void TimerSet(TimerChannelType eTimerChannel_, u16 u16TimerValue_)
     66          
     67          @brief Sets the timer tick period (interrupt rate).
     68          
     69          Based on the configuration value for the timer, each tick is 2.67us.  It is expected
     70          the user knows this and u16TimerValue_ holds a multiple of 2.67us that is
     71          desired to be timed.
     72          
     73          Requires:
     74          - TimerStop should be called before, and TimerStart should be called after 
     75          this function to reset the counter and avoid glitches.
     76          
     77          @param eTimerChannel_ holds a valid channel
     78          @param u16TimerValue_ is the number of ticks that will be timed
     79          
     80          Promises:
     81          - Updates register TC_RC value with u16TimerValue_
     82          
     83          */

   \                                 In section .text, align 2, keep-with-next
     84          void TimerSet(TimerChannelType eTimerChannel_, u16 u16TimerValue_)
     85          {
     86            /* Build the offset to the selected channel */
     87            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerSet: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable9_2  ;; 0x40080000
     88            u32TimerBaseAddress += (u32)eTimerChannel_;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x1882             ADDS     R2,R0,R2
     89          
     90            /* Load the new timer value */
     91            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_RC = (u32)(u16TimerValue_) & 0x0000FFFF;
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x61D1             STR      R1,[R2, #+28]
     92          
     93          } /* end TimerSet() */
   \   0000000A   0x4770             BX       LR               ;; return
     94          
     95          
     96          /*!---------------------------------------------------------------------------------------------------------------------
     97          @fn void TimerStart(TimerChannelType eTimerChannel_)
     98          
     99          @brief Starts the designated Timer.
    100          
    101          Requires:
    102          @param eTimerChannel_ is the timer to start
    103          
    104          Promises:
    105          - Specified channel on Timer is set to run; if already running it remains running
    106          - Does NOT reset the timer value
    107          
    108          */

   \                                 In section .text, align 2, keep-with-next
    109          void TimerStart(TimerChannelType eTimerChannel_)
    110          {
    111            /* Build the offset to the selected peripheral */
    112            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerStart: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable9_2  ;; 0x40080000
    113            u32TimerBaseAddress += (u32)eTimerChannel_;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x1841             ADDS     R1,R0,R1
    114          
    115            /* Ensure clock is enabled and triggered */
    116            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CCR |= (AT91C_TC_CLKEN | AT91C_TC_SWTRG);
   \   00000006   0x680A             LDR      R2,[R1, #+0]
   \   00000008   0xF052 0x0205      ORRS     R2,R2,#0x5
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    117            
    118          } /* end TimerStart() */
   \   0000000E   0x4770             BX       LR               ;; return
    119          
    120          
    121          /*!---------------------------------------------------------------------------------------------------------------------
    122          @fn void TimerStop(TimerChannelType eTimerChannel_)
    123          
    124          @brief Stops the designated Timer.
    125          
    126          Requires:
    127          @param eTimerChannel_ is the timer to stop
    128          
    129          Promises:
    130          - Specified timer is stopped; if already stopped it remains stopped
    131          - Does NOT reset the timer value
    132          
    133          */

   \                                 In section .text, align 2, keep-with-next
    134          void TimerStop(TimerChannelType eTimerChannel_)
    135          {
    136            /* Build the offset to the selected peripheral */
    137            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerStop: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable9_2  ;; 0x40080000
    138            u32TimerBaseAddress += (u32)eTimerChannel_;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x1841             ADDS     R1,R0,R1
    139            
    140            /* Ensure clock is disabled */
    141            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CCR |= AT91C_TC_CLKDIS;
   \   00000006   0x680A             LDR      R2,[R1, #+0]
   \   00000008   0xF052 0x0202      ORRS     R2,R2,#0x2
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    142            
    143          } /* end TimerStop */
   \   0000000E   0x4770             BX       LR               ;; return
    144          
    145          
    146          /*!---------------------------------------------------------------------------------------------------------------------
    147          @fn u16 TimerGetTime(TimerChannelType eTimerChannel_)
    148          
    149          @brief Returns the current count.
    150          
    151          Requires:
    152          @param eTimerChannel_ is the timer to query
    153          
    154          Promises:
    155          - Current 16 bit timer value is returned
    156          
    157          */

   \                                 In section .text, align 2, keep-with-next
    158          u16 TimerGetTime(TimerChannelType eTimerChannel_)
    159          {
   \                     TimerGetTime: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    160            /* Build the offset to the selected peripheral */
    161            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \   00000002   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40080000
    162            u32TimerBaseAddress += (u32)eTimerChannel_;
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x1808             ADDS     R0,R1,R0
    163            
    164            /* Read and format the timer count */
    165            return ((u16)( (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CV & 0x0000FFFF));
   \   00000008   0x6900             LDR      R0,[R0, #+16]
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    166            
    167          } /* end TimerGetTime */
    168          
    169          
    170          /*!---------------------------------------------------------------------------------------------------------------------
    171          @fn void TimerAssignCallback(TimerChannelType eTimerChannel_, fnCode_type fpUserCallback_)
    172          
    173          @brief Allows user to specify a custom callback function for when the Timer interrupt occurs.
    174          
    175          Requires:
    176          @param eTimerChannel_ is the channel to which the callback will be assigned
    177          @param fpUserCallback_ is the function address (name) for the user's callback
    178          
    179          Promises:
    180          - fpTimerxCallback loaded with fpUserCallback_
    181          
    182          */

   \                                 In section .text, align 2, keep-with-next
    183          void TimerAssignCallback(TimerChannelType eTimerChannel_, fnCode_type fpUserCallback_)
    184          {
    185            switch(eTimerChannel_)
   \                     TimerAssignCallback: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD004             BEQ.N    ??TimerAssignCallback_0
   \   00000008   0x2A40             CMP      R2,#+64
   \   0000000A   0xD003             BEQ.N    ??TimerAssignCallback_1
   \   0000000C   0x2A80             CMP      R2,#+128
   \   0000000E   0xD004             BEQ.N    ??TimerAssignCallback_2
   \   00000010   0xE004             B.N      ??TimerAssignCallback_3
    186            {
    187              case TIMER0_CHANNEL0:
    188              {
    189                break;
   \                     ??TimerAssignCallback_0: (+1)
   \   00000012   0xE003             B.N      ??TimerAssignCallback_4
    190              }
    191              case TIMER0_CHANNEL1:
    192              {
    193                Timer_fpTimer1Callback = fpUserCallback_;
   \                     ??TimerAssignCallback_1: (+1)
   \   00000014   0x....             LDR.N    R2,??DataTable9_3
   \   00000016   0x6011             STR      R1,[R2, #+0]
    194                break;
   \   00000018   0xE000             B.N      ??TimerAssignCallback_4
    195              }
    196              case TIMER0_CHANNEL2:
    197              {
    198                break;
   \                     ??TimerAssignCallback_2: (+1)
   \   0000001A   0xE7FF             B.N      ??TimerAssignCallback_4
    199              }
    200              default:
    201              {
    202                break;
    203              }
    204            } /* end switch(eTimerChannel_) */
    205            
    206          } /* end TimerAssignCallback */
   \                     ??TimerAssignCallback_3: (+1)
   \                     ??TimerAssignCallback_4: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    207          
    208          
    209          /*--------------------------------------------------------------------------------------------------------------------*/
    210          /*! @protectedsection */                                                                                            
    211          /*--------------------------------------------------------------------------------------------------------------------*/
    212          
    213          /*!--------------------------------------------------------------------------------------------------------------------
    214          @fn void TimerInitialize(void)
    215          
    216          @brief Initializes the State Machine and its variables.
    217          
    218          Requires:
    219          - NONE
    220          
    221          Promises:
    222          - Timer 1 is configured per timer.h INIT settings
    223          
    224          */

   \                                 In section .text, align 2, keep-with-next
    225          void TimerInitialize(void)
    226          {
   \                     TimerInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    227            /* Load the block configuration registers */
    228            AT91C_BASE_TCB0->TCB_BMR = TCB_BMR_INIT;
   \   00000002   0x....             LDR.N    R0,??DataTable9_4  ;; 0x100800
   \   00000004   0x....             LDR.N    R1,??DataTable9_5  ;; 0x400800c4
   \   00000006   0x6008             STR      R0,[R1, #+0]
    229           
    230            /* Channel 0 and 2 settings not configured at this time */
    231          
    232            /* Load Channel 1 settings and set the default callback */
    233            AT91C_BASE_TC1->TC_CMR = TC1_CMR_INIT;
   \   00000008   0x....             LDR.N    R0,??DataTable9_6  ;; 0xcc403
   \   0000000A   0x....             LDR.N    R1,??DataTable9_7  ;; 0x40080044
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    234            AT91C_BASE_TC1->TC_RC  = TC1_RC_INIT;
   \   0000000E   0x2026             MOVS     R0,#+38
   \   00000010   0x....             LDR.N    R1,??DataTable9_8  ;; 0x4008005c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    235            AT91C_BASE_TC1->TC_IER = TC1_IER_INIT;
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x....             LDR.N    R1,??DataTable9_9  ;; 0x40080064
   \   00000018   0x6008             STR      R0,[R1, #+0]
    236            AT91C_BASE_TC1->TC_IDR = TC1_IDR_INIT;
   \   0000001A   0x20EF             MOVS     R0,#+239
   \   0000001C   0x....             LDR.N    R1,??DataTable9_10  ;; 0x40080068
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    237            AT91C_BASE_TC1->TC_CCR = TC1_CCR_INIT;
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x....             LDR.N    R1,??DataTable9_11  ;; 0x40080040
   \   00000024   0x6008             STR      R0,[R1, #+0]
    238          
    239            Timer_fpTimer1Callback = TimerDefaultCallback;
   \   00000026   0x.... 0x....      ADR.W    R0,TimerDefaultCallback
   \   0000002A   0x....             LDR.N    R1,??DataTable9_3
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    240          
    241            /* If good initialization, set state to Idle */
    242            if( 1 )
    243            {
    244              /* Enable required interrupts */
    245              NVIC_ClearPendingIRQ(IRQn_TC1);
   \   0000002E   0x2017             MOVS     R0,#+23
   \   00000030   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    246              NVIC_EnableIRQ(IRQn_TC1);
   \   00000034   0x2017             MOVS     R0,#+23
   \   00000036   0x.... 0x....      BL       NVIC_EnableIRQ
    247              Timer_fpStateMachine = TimerSM_Idle;
   \   0000003A   0x.... 0x....      ADR.W    R0,TimerSM_Idle
   \   0000003E   0x....             LDR.N    R1,??DataTable9_12
   \   00000040   0x6008             STR      R0,[R1, #+0]
    248              DebugPrintf("Timer1 initialized\n\r");
   \   00000042   0x....             LDR.N    R0,??DataTable9_13
   \   00000044   0x.... 0x....      BL       DebugPrintf
    249              
    250              /* Flag that the Timer task is ready */
    251              G_u32ApplicationFlags |= _APPLICATION_FLAGS_TIMER;
   \   00000048   0x....             LDR.N    R0,??DataTable9_14
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000050   0x....             LDR.N    R1,??DataTable9_14
   \   00000052   0x6008             STR      R0,[R1, #+0]
    252            }
    253            else
    254            {
    255              /* The task isn't properly initialized, so shut it down and don't run */
    256              Timer_fpStateMachine = TimerSM_Error;
    257            }
    258          
    259          } /* end TimerInitialize() */
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
    260          
    261            
    262          /*!----------------------------------------------------------------------------------------------------------------------
    263          @fn void TimerRunActiveState(void)
    264          
    265          @brief Selects and runs one iteration of the current state in the state machine.
    266          
    267          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    268          may take 1ms / n to execute.
    269          
    270          Requires:
    271          - State machine function pointer points at current state
    272          
    273          Promises:
    274          - Calls the function to pointed by the state machine function pointer
    275          
    276          */

   \                                 In section .text, align 2, keep-with-next
    277          void TimerRunActiveState(void)
    278          {
   \                     TimerRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279            Timer_fpStateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable9_12
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    280          
    281          } /* end TimerRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    282          
    283          
    284          /*!----------------------------------------------------------------------------------------------------------------------
    285          @fn void TC1_IrqHandler(void)
    286          
    287          @brief Parses the TC1 interrupts and handles them appropriately.  
    288          
    289          Note that all enabled TC1 interrupts are ORed and will trigger this handler, 
    290          therefore any expected interrupt that is enabled must be parsed out 
    291          and handled.
    292          
    293          Requires:
    294          - NONE
    295          
    296          Promises:
    297          
    298          If Channel1 RC interrupt:
    299          - Timer Channel 1 is reset and automatically restarts counting
    300          - AT91C_TC_CPCS is cleared
    301          - Associated callback function is invoked
    302          - IRQn_TC1 interrupt flag is cleared
    303          
    304          */

   \                                 In section .text, align 2, keep-with-next
    305          void TC1_IrqHandler(void)
    306          {
   \                     TC1_IrqHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    307            /* Check for RC compare interrupt - reading TC_SR clears the bit if set */
    308            if(AT91C_BASE_TC1->TC_SR & AT91C_TC_CPCS)
   \   00000002   0x....             LDR.N    R0,??DataTable9_15  ;; 0x40080060
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD507             BPL.N    ??TC1_IrqHandler_0
    309            {
    310              Timer_u32Timer1IntCounter++;
   \   0000000A   0x....             LDR.N    R0,??DataTable9_16
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable9_16
   \   00000012   0x6008             STR      R0,[R1, #+0]
    311              Timer_fpTimer1Callback();
   \   00000014   0x....             LDR.N    R0,??DataTable9_3
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x4780             BLX      R0
    312            }
    313          
    314            /* Clear the TC pending flag and exit */
    315            NVIC_ClearPendingIRQ(IRQn_TC1);
   \                     ??TC1_IrqHandler_0: (+1)
   \   0000001A   0x2017             MOVS     R0,#+23
   \   0000001C   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    316            
    317          } /* end TC1_IrqHandler() */
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    318          
    319          
    320          /*------------------------------------------------------------------------------------------------------------------*/
    321          /*! @privatesection */                                                                                            
    322          /*--------------------------------------------------------------------------------------------------------------------*/
    323            
    324          /*!----------------------------------------------------------------------------------------------------------------------
    325          @fn static void TimerDefaultCallback(void)
    326          
    327          @brief An empty function that the Timer Callback points to.  Expected that the 
    328          user will set their own.
    329          
    330          Requires:
    331          - NONE 
    332          
    333          Promises:
    334          - NONE 
    335          
    336          */

   \                                 In section .text, align 4, keep-with-next
    337          static void TimerDefaultCallback(void)
    338          {
    339            
    340          } /* end TimerDefaultCallback() */
   \                     TimerDefaultCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    341          
    342          
    343          /**********************************************************************************************************************
    344          State Machine Function Definitions
    345          **********************************************************************************************************************/
    346          
    347          /*!-------------------------------------------------------------------------------------------------------------------
    348          @fn static void TimerSM_Idle(void)
    349          
    350          @brief Wait for a message to be queued 

   \                                 In section .text, align 4, keep-with-next
    351          */static void TimerSM_Idle(void)
    352          {
    353             
    354          } /* end TimerSM_Idle() */
   \                     TimerSM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40080000         DC32     0x40080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     Timer_fpTimer1Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x00100800         DC32     0x100800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x400800C4         DC32     0x400800c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x000CC403         DC32     0xcc403

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x40080044         DC32     0x40080044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x4008005C         DC32     0x4008005c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x40080064         DC32     0x40080064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x40080068         DC32     0x40080068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x40080040         DC32     0x40080040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     Timer_fpStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     G_u32ApplicationFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x40080060         DC32     0x40080060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     Timer_u32Timer1IntCounter

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x69          DC8 "Timer1 initialized\012\015"
   \              0x6D 0x65    
   \              0x72 0x31    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    355               
    356          
    357          /*-------------------------------------------------------------------------------------------------------------------*/
    358          /* Handle an error */
    359          static void TimerSM_Error(void)          
    360          {
    361            
    362          } /* end TimerSM_Error() */
    363          
    364          
    365          
    366          
    367          /*--------------------------------------------------------------------------------------------------------------------*/
    368          /* End of File                                                                                                        */
    369          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_ClearPendingIRQ
       0   NVIC_EnableIRQ
       8   TC1_IrqHandler
         8   -- Indirect call
         8   -> NVIC_ClearPendingIRQ
       0   TimerAssignCallback
       0   TimerDefaultCallback
       0   TimerGetTime
       8   TimerInitialize
         8   -> DebugPrintf
         8   -> NVIC_ClearPendingIRQ
         8   -> NVIC_EnableIRQ
       8   TimerRunActiveState
         8   -- Indirect call
       0   TimerSM_Idle
       0   TimerSet
       0   TimerStart
       0   TimerStop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      24  ?_0
       4  G_u32TimerFlags
      20  NVIC_ClearPendingIRQ
      20  NVIC_EnableIRQ
      34  TC1_IrqHandler
      30  TimerAssignCallback
       2  TimerDefaultCallback
      14  TimerGetTime
      86  TimerInitialize
      10  TimerRunActiveState
       2  TimerSM_Idle
      12  TimerSet
      16  TimerStart
      16  TimerStop
       4  Timer_fpStateMachine
       4  Timer_fpTimer1Callback
       4  Timer_u32Timer1IntCounter

 
  16 bytes in section .bss
  24 bytes in section .rodata
 330 bytes in section .text
 
 330 bytes of CODE  memory
  24 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none

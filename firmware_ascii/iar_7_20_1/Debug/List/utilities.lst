###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jan/2020  11:19:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\drivers\utilities.c
#    Command line =  
#        F:\EIE_TEXT\二进制计数器\firmware_common\drivers\utilities.c -D
#        EIE_ASCII --preprocess=cl
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -lC
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\ -o
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Software\Develop\IAR for
#        ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\drivers\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\application\ -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\bsp\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Software\Develop\IAR
#        for ARM\arm\CMSIS\Include\"
#    List file    =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\List\utilities.lst
#    Object file  =  
#        F:\EIE_TEXT\二进制计数器\firmware_ascii\iar_7_20_1\Debug\Obj\utilities.o
#
###############################################################################

F:\EIE_TEXT\二进制计数器\firmware_common\drivers\utilities.c
      1          /*!**********************************************************************************************************************
      2          @file utilities.c                                                                
      3          
      4          @brief Various useful functions and definitions.
      5          
      6          ------------------------------------------------------------------------------------------------------------------------
      7          GLOBALS
      8          - NONE
      9          
     10          CONSTANTS
     11          - NONE
     12          
     13          TYPES
     14          - NONE
     15          
     16          PUBLIC FUNCTIONS
     17          - bool IsTimeUp(u32 *pu32SavedTick_, u32 u32Period_)
     18          
     19          PROTECTED FUNCTIONS
     20          - NONE
     21          
     22          ***********************************************************************************************************************/
     23          
     24          #include "configuration.h"
     25          
     26          /***********************************************************************************************************************
     27          Global variable definitions with scope across entire project.
     28          All Global variable names shall start with "G_<type>Util"
     29          ***********************************************************************************************************************/
     30          /* New variables */

   \                                 In section .data, align 4
     31          u8 G_au8UtilMessageOK[]   = MESSAGE_OK;            /*!< @brief Common "OK" message */
   \                     G_au8UtilMessageOK:
   \   00000000   0x4F 0x4B          DC8 "OK\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     32          u8 G_au8UtilMessageFAIL[] = MESSAGE_FAIL;          /*!< @brief Common "FAIL" message */
   \                     G_au8UtilMessageFAIL:
   \   00000000   0x46 0x41          DC8 "FAIL\015\012"
   \              0x49 0x4C    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
     33          u8 G_au8UtilMessageON[]   = MESSAGE_ON;            /*!< @brief Common "ON" message */
   \                     G_au8UtilMessageON:
   \   00000000   0x4F 0x4E          DC8 "ON\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     34          u8 G_au8UtilMessageOFF[]  = MESSAGE_OFF;           /*!< @brief Common "OFF" message */
   \                     G_au8UtilMessageOFF:
   \   00000000   0x4F 0x46          DC8 "OFF\015\012"
   \              0x46 0x0D    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
     35          
     36          
     37          /*--------------------------------------------------------------------------------------------------------------------*/
     38          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     39          extern volatile u32 G_u32SystemTime1ms;                /*!< From main.c */
     40          extern volatile u32 G_u32SystemTime1s;                 /*!< From main.c */
     41          extern volatile u32 G_u32SystemFlags;                  /*!< From main.c */
     42          extern volatile u32 G_u32ApplicationFlags;             /*!< From main.c */
     43          
     44          
     45          /***********************************************************************************************************************
     46          Global variable definitions with scope limited to this local application.
     47          Variable names shall start with "Util_<type>" and be declared as static.
     48          ***********************************************************************************************************************/
     49          
     50          
     51          /***********************************************************************************************************************
     52          Function Definitions
     53          ***********************************************************************************************************************/
     54          /*--------------------------------------------------------------------------------------------------------------------*/
     55          /*! @publicsection */                                                                                            
     56          /*--------------------------------------------------------------------------------------------------------------------*/
     57          
     58          /*!---------------------------------------------------------------------------------------------------------------------
     59          @fn bool IsTimeUp(u32 *pu32SavedTick_, u32 u32Period_)
     60            
     61          @brief Checks if the difference between the current G_u32SystemTime1ms and the 
     62          saved G_u32SystemTime1ms is greater than the period specified. 
     63          
     64          The referenced current time is always G_u32SystemTime1ms.  The function 
     65          handles rollover of G_u32SystemTime1ms.
     66          
     67          Example
     68          #define U32_PERIOD    (u32)1000
     69          
     70          u32 u32Timeout = G_u32SystemTime1ms;
     71          
     72          // other code runs for a while
     73          if( IsTimeUp(&u32Timeout, U32_PERIOD) )
     74          {
     75            // Time is up so do something
     76          }
     77          
     78          Requires:
     79          @param *pu32SavedTick_ points to the saved tick value (in ms)
     80          @param u32Period_ is the desired period in ms
     81          
     82          Promises:
     83          - Returns FALSE if u32Period_ has not elapsed
     84          - Returns TRUE if u32Period_ has elapsed
     85          
     86          */

   \                                 In section .text, align 2, keep-with-next
     87          bool IsTimeUp(u32 *pu32SavedTick_, u32 u32Period_)
     88          {
   \                     IsTimeUp: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
     89            u32 u32TimeElapsed;
     90            
     91            /* Check to see if the timer in question has rolled */
     92            if(G_u32SystemTime1ms >= *pu32SavedTick_)
   \   00000004   0x....             LDR.N    R0,??DataTable1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6814             LDR      R4,[R2, #+0]
   \   0000000A   0x42A0             CMP      R0,R4
   \   0000000C   0xD305             BCC.N    ??IsTimeUp_0
     93            {
     94              u32TimeElapsed = G_u32SystemTime1ms - *pu32SavedTick_;
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x6814             LDR      R4,[R2, #+0]
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0x0003             MOVS     R3,R0
   \   00000018   0xE007             B.N      ??IsTimeUp_1
     95            }
     96            else
     97            {
     98              u32TimeElapsed = (0xFFFFFFFF - *pu32SavedTick_) + G_u32SystemTime1ms;
   \                     ??IsTimeUp_0: (+1)
   \   0000001A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001E   0x6814             LDR      R4,[R2, #+0]
   \   00000020   0x1B00             SUBS     R0,R0,R4
   \   00000022   0x....             LDR.N    R4,??DataTable1
   \   00000024   0x6824             LDR      R4,[R4, #+0]
   \   00000026   0x1820             ADDS     R0,R4,R0
   \   00000028   0x0003             MOVS     R3,R0
     99            }
    100          
    101            /* Now determine if time is up */
    102            if(u32TimeElapsed < u32Period_)
   \                     ??IsTimeUp_1: (+1)
   \   0000002A   0x428B             CMP      R3,R1
   \   0000002C   0xD201             BCS.N    ??IsTimeUp_2
    103            {
    104              return(FALSE);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE000             B.N      ??IsTimeUp_3
    105            }
    106            else
    107            {
    108              return(TRUE);
   \                     ??IsTimeUp_2: (+1)
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??IsTimeUp_3: (+1)
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
    109            }
    110          
    111          } /* end IsTimeUp() */
    112          
    113          
    114          /*!---------------------------------------------------------------------------------------------------------------------
    115          @fn u8 ASCIIHexCharToNum(u8 u8Char_)
    116          
    117          @brief Determines the numerical value of a hexidecimal ASCII char of that number
    118          ('0' - 'F' or '0' - 'f' -> 0 - 15).
    119          
    120          Requires:
    121          - Standard ASCII table is in use
    122          
    123          @param u8Char_ is the number to convert
    124           
    125          Promises:
    126          - If valid 0-9, A-F or a-f, returns the numerical value of the ASCII char
    127          - Otherwise returns 0xff
    128          
    129          */

   \                                 In section .text, align 2, keep-with-next
    130          u8 ASCIIHexCharToNum(u8 u8Char_)
    131          {
   \                     ASCIIHexCharToNum: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    132            if( (u8Char_ >= '0') && (u8Char_ <= '9') )
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2930             CMP      R1,#+48
   \   00000006   0xDB06             BLT.N    ??ASCIIHexCharToNum_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x293A             CMP      R1,#+58
   \   0000000C   0xDA03             BGE.N    ??ASCIIHexCharToNum_0
    133              return(u8Char_ - NUMBER_ASCII_TO_DEC);
   \   0000000E   0xF1B1 0x0030      SUBS     R0,R1,#+48
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xE014             B.N      ??ASCIIHexCharToNum_1
    134                 
    135            if( (u8Char_ >= 'A') && (u8Char_ <= 'F') )
   \                     ??ASCIIHexCharToNum_0: (+1)
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x2941             CMP      R1,#+65
   \   0000001A   0xDB06             BLT.N    ??ASCIIHexCharToNum_2
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x2947             CMP      R1,#+71
   \   00000020   0xDA03             BGE.N    ??ASCIIHexCharToNum_2
    136              return(u8Char_ - UPPERCASE_ASCII_TO_DEC);
   \   00000022   0xF1B1 0x0037      SUBS     R0,R1,#+55
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0xE00A             B.N      ??ASCIIHexCharToNum_1
    137            
    138            if( (u8Char_ >= 'a') && (u8Char_ <= 'f') )
   \                     ??ASCIIHexCharToNum_2: (+1)
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x2961             CMP      R1,#+97
   \   0000002E   0xDB06             BLT.N    ??ASCIIHexCharToNum_3
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2967             CMP      R1,#+103
   \   00000034   0xDA03             BGE.N    ??ASCIIHexCharToNum_3
    139              return(u8Char_ - LOWERCASE_ASCII_TO_DEC);
   \   00000036   0xF1B1 0x0057      SUBS     R0,R1,#+87
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xE000             B.N      ??ASCIIHexCharToNum_1
    140            
    141            return(0xff);
   \                     ??ASCIIHexCharToNum_3: (+1)
   \   0000003E   0x20FF             MOVS     R0,#+255
   \                     ??ASCIIHexCharToNum_1: (+1)
   \   00000040   0x4770             BX       LR               ;; return
    142          
    143          } /* end ASCIIHexChartoChar */
    144          
    145          
    146          /*!---------------------------------------------------------------------------------------------------------------------
    147          @fn u8 HexToASCIICharUpper(u8 u8Char_)
    148          
    149          @brief Determines the ASCII char of a single digit number
    150          0 - 15 -> '0' - 'F'
    151          
    152          Requires:
    153          - Standard ASCII table is in use
    154          
    155          @param u8Char_ is a number that is to be returned in uppercase ASCII
    156          
    157          Promises:
    158          - If valid 0-15, returns the corresponding ASCII hex char 0-9, A-F
    159          - Otherwise returns 0xff
    160          
    161          */

   \                                 In section .text, align 2, keep-with-next
    162          u8 HexToASCIICharUpper(u8 u8Char_)
    163          {
   \                     HexToASCIICharUpper: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    164            u8 u8ReturnValue = 0xFF;
   \   00000002   0x20FF             MOVS     R0,#+255
    165            
    166            if( u8Char_ <= 9 )
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x290A             CMP      R1,#+10
   \   00000008   0xDA03             BGE.N    ??HexToASCIICharUpper_0
    167            {
    168              u8ReturnValue = u8Char_ + NUMBER_ASCII_TO_DEC;
   \   0000000A   0xF111 0x0230      ADDS     R2,R1,#+48
   \   0000000E   0x0010             MOVS     R0,R2
   \   00000010   0xE008             B.N      ??HexToASCIICharUpper_1
    169            }
    170            
    171            else if( (u8Char_ >= 10) && (u8Char_ <= 15) )
   \                     ??HexToASCIICharUpper_0: (+1)
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x290A             CMP      R1,#+10
   \   00000016   0xDB05             BLT.N    ??HexToASCIICharUpper_1
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2910             CMP      R1,#+16
   \   0000001C   0xDA02             BGE.N    ??HexToASCIICharUpper_1
    172            {
    173              u8ReturnValue = u8Char_ + UPPERCASE_ASCII_TO_DEC;
   \   0000001E   0xF111 0x0237      ADDS     R2,R1,#+55
   \   00000022   0x0010             MOVS     R0,R2
    174            }
    175            
    176            return(u8ReturnValue);
   \                     ??HexToASCIICharUpper_1: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x4770             BX       LR               ;; return
    177          
    178          } /* end HexToASCIICharUpper */
    179          
    180          
    181          /*!---------------------------------------------------------------------------------------------------------------------
    182          @fn u8 HexToASCIICharLower(u8 u8Char_)
    183          
    184          @brief Determines the ASCII char of a single digit number
    185          0 - 15 -> '0' - 'f'
    186          
    187          Requires:
    188          - Standard ASCII table is in use
    189          
    190          @param u8Char_ is a number that is to be returned in lowercase ASCII
    191           
    192          Promises:
    193          - If valid 0-15, returns the corresponding ASCII hex char 0-9, a-f
    194          - Otherwise returns 0xFF
    195          
    196          */

   \                                 In section .text, align 2, keep-with-next
    197          u8 HexToASCIICharLower(u8 u8Char_)
    198          {
   \                     HexToASCIICharLower: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    199            u8 u8ReturnValue = 0xFF;
   \   00000002   0x20FF             MOVS     R0,#+255
    200            
    201            if( u8Char_ <= 9 )
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x290A             CMP      R1,#+10
   \   00000008   0xDA03             BGE.N    ??HexToASCIICharLower_0
    202            {
    203              u8ReturnValue = u8Char_ + NUMBER_ASCII_TO_DEC;
   \   0000000A   0xF111 0x0230      ADDS     R2,R1,#+48
   \   0000000E   0x0010             MOVS     R0,R2
   \   00000010   0xE008             B.N      ??HexToASCIICharLower_1
    204            }
    205            
    206            else if( (u8Char_ >= 10) && (u8Char_ <= 15) )
   \                     ??HexToASCIICharLower_0: (+1)
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x290A             CMP      R1,#+10
   \   00000016   0xDB05             BLT.N    ??HexToASCIICharLower_1
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2910             CMP      R1,#+16
   \   0000001C   0xDA02             BGE.N    ??HexToASCIICharLower_1
    207            {
    208              u8ReturnValue = u8Char_ + LOWERCASE_ASCII_TO_DEC;
   \   0000001E   0xF111 0x0257      ADDS     R2,R1,#+87
   \   00000022   0x0010             MOVS     R0,R2
    209            }
    210            
    211            return(u8ReturnValue);
   \                     ??HexToASCIICharLower_1: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x4770             BX       LR               ;; return
    212          
    213          } /* end HexToASCIICharLower */
    214          
    215          
    216          /*!---------------------------------------------------------------------------------------------------------------------
    217          @fn u8 NumberToAscii(u32 u32Number_, u8* pu8AsciiString_)
    218          
    219          @brief Converts a long into an ASCII string.  Maximum of 10 digits + NULL.
    220          
    221          Requires:
    222          @param u32Number_ is the number to convert
    223          @param *pu8AsciiString_ points to the destination string location which must
    224          have sufficient space for the number.
    225           
    226          Promises:
    227          - Null-terminated string of the number is loaded to pu8AsciiString_
    228          - Returns the number of digits
    229          
    230          */

   \                                 In section .text, align 2, keep-with-next
    231          u8 NumberToAscii(u32 u32Number_, u8* pu8AsciiString_)
    232          {
   \                     NumberToAscii: (+1)
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    233            bool bFoundDigit = FALSE;
   \   00000008   0x2600             MOVS     R6,#+0
    234            u8 au8AsciiNumber[11];
    235            u8 u8CharCount = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    236            u32 u32Divider = 1000000000;
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable1_1  ;; 0x3b9aca00
    237            u8 u8Temp;
    238            
    239            /* Parse out all the digits, start counting after leading zeros */
    240            for(u8 i = 0; i < 10; i++)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??NumberToAscii_0: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x280A             CMP      R0,#+10
   \   00000016   0xDA1B             BGE.N    ??NumberToAscii_1
    241            {
    242              u8Temp = (u32Number_ / u32Divider);
   \   00000018   0xFBB4 0xF1F8      UDIV     R1,R4,R8
   \   0000001C   0x4689             MOV      R9,R1
    243              
    244              /* Check for first non-leading zero */
    245              if(u8Temp != 0)
   \   0000001E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000022   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000026   0xD001             BEQ.N    ??NumberToAscii_2
    246              {
    247                bFoundDigit = TRUE;
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x000E             MOVS     R6,R1
    248              }
    249          
    250              /* As long as a non-leading zero has been found, add the ASCII char */
    251              if(bFoundDigit)
   \                     ??NumberToAscii_2: (+1)
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD005             BEQ.N    ??NumberToAscii_3
    252              {
    253                au8AsciiNumber[u8CharCount] = u8Temp + 0x30;
   \   00000032   0xF119 0x0130      ADDS     R1,R9,#+48
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   0x54B9             STRB     R1,[R7, R2]
    254                u8CharCount++;
   \   0000003C   0x1C7F             ADDS     R7,R7,#+1
    255              }
    256              
    257              /* Update for next iteration */
    258              u32Number_ %= u32Divider;
   \                     ??NumberToAscii_3: (+1)
   \   0000003E   0xFBB4 0xF1F8      UDIV     R1,R4,R8
   \   00000042   0xFB08 0x4411      MLS      R4,R8,R1,R4
    259              u32Divider /= 10;
   \   00000046   0x210A             MOVS     R1,#+10
   \   00000048   0xFBB8 0xF8F1      UDIV     R8,R8,R1
    260            }
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0xE7E0             B.N      ??NumberToAscii_0
    261            
    262            /* Handle special case where u32Number == 0 */
    263            if(!bFoundDigit)
   \                     ??NumberToAscii_1: (+1)
   \   00000050   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000052   0x2E00             CMP      R6,#+0
   \   00000054   0xD104             BNE.N    ??NumberToAscii_4
    264            {
    265              u8CharCount = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x0007             MOVS     R7,R0
    266              au8AsciiNumber[0] = '0';
   \   0000005A   0x2030             MOVS     R0,#+48
   \   0000005C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    267            }
    268            
    269            /* Add the null and copy to destination */
    270            au8AsciiNumber[u8CharCount] = '\0';
   \                     ??NumberToAscii_4: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xA900             ADD      R1,SP,#+0
   \   00000064   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000066   0x5478             STRB     R0,[R7, R1]
    271            strcpy((char *)pu8AsciiString_, (const char*)au8AsciiNumber);
   \   00000068   0xA900             ADD      R1,SP,#+0
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       strcpy
    272            
    273            return(u8CharCount);
   \   00000070   0x0038             MOVS     R0,R7
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    274          
    275          } /* end NumberToAscii() */
    276          
    277          
    278          /*!---------------------------------------------------------------------------------------------------------------------
    279          @fn bool SearchString(u8* pu8TargetString_, u8* pu8MatchString_)
    280          
    281          @brief Searches a string for another string.  Finds only an exact match of the string (case sensitive).
    282          The character following matched string must be space, <CR> or <LF>.
    283          
    284          Requires:
    285          - Standard ASCII table is in use
    286          
    287          @param pu8TargetString_ points to the start of a NULL, <CR> or <LF> terminated string to search
    288          @param pu8MatchString_ points to the start of a NULL, <CR> or <LF> terminated string to be found in pu8TargetString_
    289           
    290          Promises:
    291          - Returns TRUE if the string is found
    292          
    293          */

   \                                 In section .text, align 2, keep-with-next
    294          bool SearchString(u8* pu8TargetString_, u8* pu8MatchString_)
    295          {
   \                     SearchString: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0002             MOVS     R2,R0
    296            u8* pu8MatchChar = pu8MatchString_;
   \   00000004   0x000B             MOVS     R3,R1
    297            u8* pu8TargetChar = pu8TargetString_;
   \   00000006   0x0014             MOVS     R4,R2
    298            
    299            do
    300            {
    301              /* Scan for the current character of pu8MatchString_ in pu8TargetString_ */
    302              while( (*pu8MatchChar != *pu8TargetChar) && (*pu8TargetChar != '\0') &&
    303                     (*pu8TargetChar != ASCII_LINEFEED) && (*pu8TargetChar != ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_0: (+1)
   \   00000008   0x7818             LDRB     R0,[R3, #+0]
   \   0000000A   0x7825             LDRB     R5,[R4, #+0]
   \   0000000C   0x42A8             CMP      R0,R5
   \   0000000E   0xD00A             BEQ.N    ??SearchString_1
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD007             BEQ.N    ??SearchString_1
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xD004             BEQ.N    ??SearchString_1
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x280D             CMP      R0,#+13
   \   00000020   0xD001             BEQ.N    ??SearchString_1
    304              {
    305                pu8TargetChar++;
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0xE7F0             B.N      ??SearchString_0
    306              }
    307              
    308              /* Exit if we're at the end of the target string */
    309              if( (*pu8TargetChar == '\0') ||
    310                  (*pu8TargetChar == ASCII_LINEFEED) || (*pu8TargetChar == ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_1: (+1)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD005             BEQ.N    ??SearchString_2
   \   0000002C   0x7820             LDRB     R0,[R4, #+0]
   \   0000002E   0x280A             CMP      R0,#+10
   \   00000030   0xD002             BEQ.N    ??SearchString_2
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x280D             CMP      R0,#+13
   \   00000036   0xD101             BNE.N    ??SearchString_3
    311              {
    312                return(FALSE);
   \                     ??SearchString_2: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE032             B.N      ??SearchString_4
    313              }
    314              
    315              /* If we found a match, look for next char */
    316              while ( *pu8MatchChar == *pu8TargetChar )
   \                     ??SearchString_3: (+1)
   \   0000003C   0x7818             LDRB     R0,[R3, #+0]
   \   0000003E   0x7825             LDRB     R5,[R4, #+0]
   \   00000040   0x42A8             CMP      R0,R5
   \   00000042   0xD118             BNE.N    ??SearchString_5
    317              {
    318                pu8MatchChar++;
   \   00000044   0x1C5B             ADDS     R3,R3,#+1
    319                pu8TargetChar++;
   \   00000046   0x1C64             ADDS     R4,R4,#+1
    320                
    321                /* At the end of the match string? */
    322                if( (*pu8MatchChar == '\0') || (*pu8MatchChar == ASCII_LINEFEED) || (*pu8MatchChar == ASCII_CARRIAGE_RETURN) )
   \   00000048   0x7818             LDRB     R0,[R3, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD005             BEQ.N    ??SearchString_6
   \   0000004E   0x7818             LDRB     R0,[R3, #+0]
   \   00000050   0x280A             CMP      R0,#+10
   \   00000052   0xD002             BEQ.N    ??SearchString_6
   \   00000054   0x7818             LDRB     R0,[R3, #+0]
   \   00000056   0x280D             CMP      R0,#+13
   \   00000058   0xD1F0             BNE.N    ??SearchString_3
    323                {
    324                  /* Check if the next character in pu8TargetChar is space, <CR>, <LF> or ':' */
    325                  if( (*pu8TargetChar == ' ') ||
    326                      (*pu8TargetChar == ASCII_CARRIAGE_RETURN) ||
    327                      (*pu8TargetChar == ASCII_LINEFEED) ||
    328                      (*pu8TargetChar == ':')  )
   \                     ??SearchString_6: (+1)
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x2820             CMP      R0,#+32
   \   0000005E   0xD008             BEQ.N    ??SearchString_7
   \   00000060   0x7820             LDRB     R0,[R4, #+0]
   \   00000062   0x280D             CMP      R0,#+13
   \   00000064   0xD005             BEQ.N    ??SearchString_7
   \   00000066   0x7820             LDRB     R0,[R4, #+0]
   \   00000068   0x280A             CMP      R0,#+10
   \   0000006A   0xD002             BEQ.N    ??SearchString_7
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x283A             CMP      R0,#+58
   \   00000070   0xD1E4             BNE.N    ??SearchString_3
    329                  {
    330                    return(TRUE);
   \                     ??SearchString_7: (+1)
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0xE015             B.N      ??SearchString_4
    331                  }
    332                }
    333              }
    334          
    335              /* At the end of the target string? */
    336              if( (*pu8TargetChar == '\0') || (*pu8TargetChar == ASCII_LINEFEED) || (*pu8TargetChar == ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_5: (+1)
   \   00000076   0x7820             LDRB     R0,[R4, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ.N    ??SearchString_8
   \   0000007C   0x7820             LDRB     R0,[R4, #+0]
   \   0000007E   0x280A             CMP      R0,#+10
   \   00000080   0xD002             BEQ.N    ??SearchString_8
   \   00000082   0x7820             LDRB     R0,[R4, #+0]
   \   00000084   0x280D             CMP      R0,#+13
   \   00000086   0xD101             BNE.N    ??SearchString_9
    337              {
    338                return(FALSE);
   \                     ??SearchString_8: (+1)
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xE00A             B.N      ??SearchString_4
    339              }
    340              
    341              /* If here, match was not found (yet), but as long as there are more characters in pu8TargetChar,
    342              then we can scan again. */
    343              
    344              /* Reset match pointer back to the start of its string */
    345              pu8MatchChar = pu8MatchString_;
   \                     ??SearchString_9: (+1)
   \   0000008C   0x000B             MOVS     R3,R1
    346            } while ( (*pu8TargetChar != '\0') &&
    347                      (*pu8TargetChar != ASCII_LINEFEED) && (*pu8TargetChar != ASCII_CARRIAGE_RETURN) );
   \   0000008E   0x7820             LDRB     R0,[R4, #+0]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD005             BEQ.N    ??SearchString_10
   \   00000094   0x7820             LDRB     R0,[R4, #+0]
   \   00000096   0x280A             CMP      R0,#+10
   \   00000098   0xD002             BEQ.N    ??SearchString_10
   \   0000009A   0x7820             LDRB     R0,[R4, #+0]
   \   0000009C   0x280D             CMP      R0,#+13
   \   0000009E   0xD1B3             BNE.N    ??SearchString_0
    348            
    349            /* If we get here, no match was found */
    350            return(FALSE);
   \                     ??SearchString_10: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??SearchString_4: (+1)
   \   000000A2   0xBC30             POP      {R4,R5}
   \   000000A4   0x4770             BX       LR               ;; return
    351          
    352          } /* end SearchString */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x3B9ACA00         DC32     0x3b9aca00
    353          
    354          
    355          /*--------------------------------------------------------------------------------------------------------------------*/
    356          /*! @protectedsection */                                                                                            
    357          /*--------------------------------------------------------------------------------------------------------------------*/
    358          
    359          /*------------------------------------------------------------------------------------------------------------------*/
    360          /*! @privatesection */                                                                                            
    361          /*--------------------------------------------------------------------------------------------------------------------*/
    362          
    363          
    364          
    365          
    366          /*--------------------------------------------------------------------------------------------------------------------*/
    367          /* End of File */
    368          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ASCIIHexCharToNum
       0   HexToASCIICharLower
       0   HexToASCIICharUpper
       4   IsTimeUp
      40   NumberToAscii
        40   -> strcpy
       8   SearchString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      66  ASCIIHexCharToNum
       8  G_au8UtilMessageFAIL
       8  G_au8UtilMessageOFF
       8  G_au8UtilMessageOK
       8  G_au8UtilMessageON
      40  HexToASCIICharLower
      40  HexToASCIICharUpper
      56  IsTimeUp
     120  NumberToAscii
     166  SearchString

 
  32 bytes in section .data
 496 bytes in section .text
 
 496 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
